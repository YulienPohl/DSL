<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes>
    <entry>
      <string>Description</string>
      <string>Square Root outputs the integer root.

{{de Square Root gibt die Integer Wurzel aus..}}</string>
    </entry>
    <entry>
      <string>isGeneric</string>
      <boolean>true</boolean>
    </entry>
    <entry>
      <string>Label</string>
      <string>Sqrt</string>
    </entry>
    <entry>
      <string>romContent</string>
      <romList>
        <roms/>
      </romList>
    </entry>
  </attributes>
  <visualElements>
    <visualElement>
      <elementName>GenericInitCode</elementName>
      <elementAttributes>
        <entry>
          <string>generic</string>
          <string>bits := 8;</string>
        </entry>
      </elementAttributes>
      <pos x="0" y="-100"/>
    </visualElement>
    <visualElement>
      <elementName>GenericCode</elementName>
      <elementAttributes>
        <entry>
          <string>generic</string>
          <string>even_bits := 2;
if (args.bits % 2 = 0) {
    even_bits = args.bits;
    addWire(-18, 0, -17, 0);
} else {
    even_bits = args.bits + 1;
    s := addComponent(&quot;Splitter&quot;, -18, 0);
    s.&apos;Input Splitting&apos;  = &quot;&quot; + args.bits + &quot;,1&quot;;
    s.&apos;Output Splitting&apos; = &quot;&quot; + even_bits;
    
    gnd := addComponent(&quot;Ground&quot;, -19, 1);
    gnd.rotation = 1;
    
    addWire(-19, 1, -18, 1);
}

s := addComponent(&quot;Splitter&quot;, -14, 0);
s.&apos;Input Splitting&apos;  = &quot;&quot; + even_bits;
s.&apos;Output Splitting&apos; = &quot;&quot; + (even_bits - 2) + &quot;,2&quot;;

N := even_bits / 2 - 1;
WIDTH := 20;

for (i := 0; i &lt; N; i++) {
    iWIDTH := i * WIDTH;
    i1 := i + 1;
    i2 := i + 2;
    i3 := i + 3;

    s0 := addComponent(&quot;Splitter&quot;, iWIDTH + 0, 0);
    s0.&apos;Input Splitting&apos;  = &quot;&quot; + (even_bits - i1*2);
    s0.&apos;Output Splitting&apos; = &quot;&quot; + (even_bits - i2*2) + &quot;,2&quot;;

    addWire(iWIDTH + 1, 0, iWIDTH + 20, 0);
    addWire(iWIDTH + 1, 1, iWIDTH + 4, 1);

    s1 := addComponent(&quot;Splitter&quot;, iWIDTH + 0, 2);
    s1.&apos;Input Splitting&apos;  = &quot;&quot; + i2;
    s1.&apos;Output Splitting&apos; = &quot;&quot; + i1 + &quot;,1&quot;;
    s1.splitterSpreading = 5;
    
    addWire(iWIDTH + 1, 2, iWIDTH + 4, 2);
    addWire(iWIDTH + 1, 7, iWIDTH + 11, 7);
    addWire(iWIDTH + 11, 7, iWIDTH + 11, 6);
    addWire(iWIDTH + 11, 6, iWIDTH + 12, 6);

    s2 := addComponent(&quot;Splitter&quot;, iWIDTH + 4, 1);
    s2.&apos;Input Splitting&apos;  = &quot;2,&quot; + i1;
    s2.&apos;Output Splitting&apos; = &quot;&quot; + i3;

    addWire(iWIDTH + 5, 1, iWIDTH + 15, 1);
    addWire(iWIDTH + 6, 1, iWIDTH + 6, 3);
    addWire(iWIDTH + 6, 3, iWIDTH + 7, 3);

    s3 := addComponent(&quot;Splitter&quot;, iWIDTH + 4, 4);
    s3.&apos;Input Splitting&apos;  = &quot;2,&quot; + i1;
    s3.&apos;Output Splitting&apos; = &quot;&quot; + i3;

    const := addComponent(&quot;Const&quot;, iWIDTH + 2, 4);
    const.Bits = 2;
    const.Value = 1;

    addWire(iWIDTH + 2, 4, iWIDTH + 4, 4);
    addWire(iWIDTH + 5, 4, iWIDTH + 7, 4);
    addWire(iWIDTH + 3, 5, iWIDTH + 4, 5);
    addWire(iWIDTH + 3, 5, iWIDTH + 3, 8);

    s4 := addComponent(&quot;Splitter&quot;, iWIDTH + 17, 5);
    s4.&apos;Input Splitting&apos;  = &quot;1,&quot; + i1;
    s4.&apos;Output Splitting&apos; = &quot;&quot; + i2;
    s4.splitterSpreading = 3;

    addWire(iWIDTH + 0, 8, iWIDTH + 17, 8);
    addWire(iWIDTH + 18, 5, iWIDTH + 19, 5);
    addWire(iWIDTH + 19, 5, iWIDTH + 19, 8);
    addWire(iWIDTH + 19, 8, iWIDTH + 20, 8);

    sub := addComponent(&quot;Sub&quot;, iWIDTH + 7, 3);
    sub.Bits = i3;

    gnd := addComponent(&quot;Ground&quot;, iWIDTH + 6, 5);
    gnd.rotation = 1;

    addWire(iWIDTH + 6, 5, iWIDTH + 7, 5);
    addWire(iWIDTH + 10, 3, iWIDTH + 15, 3);
    addWire(iWIDTH + 10, 4, iWIDTH + 11, 4);

    or := addComponent(&quot;Or&quot;, iWIDTH + 12, 4);
    or.inverterConfig = [&quot;In_1&quot;];
    or.wideShape = false;

    addWire(iWIDTH + 15, 5, iWIDTH + 17, 5);
    addWire(iWIDTH + 16, 5, iWIDTH + 16, 3);

    mux := addComponent(&quot;Multiplexer&quot;, iWIDTH + 15, 1);
    mux.Bits = i3;

    addWire(iWIDTH + 17, 2, iWIDTH + 20, 2);
}

out := addComponent(&quot;Out&quot;, N * WIDTH, 8);
out.intFormat = 1;
out.Bits = N + 1;
out.Label = &quot;out&quot;;</string>
        </entry>
      </elementAttributes>
      <pos x="0" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="-260" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Sub</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="-220" y="60"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="-240" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="-100" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes/>
      <pos x="-140" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>in</string>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>dec</intFormat>
        </entry>
        <entry>
          <string>generic</string>
          <string>this.Bits = args.bits;</string>
        </entry>
      </elementAttributes>
      <pos x="-420" y="0"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>in out
0  0
1  1
2  1
3  1
4  2
5  2
6  2
7  2
8  2
9  3
10 3
11 3
12 3
13 3
14 3
15 3</dataString>
          </testData>
        </entry>
        <entry>
          <string>generic</string>
          <string>bits := 4;</string>
        </entry>
      </elementAttributes>
      <pos x="-100" y="-100"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="-340" y="0"/>
      <p2 x="-280" y="0"/>
    </wire>
    <wire>
      <p1 x="-260" y="0"/>
      <p2 x="0" y="0"/>
    </wire>
    <wire>
      <p1 x="-420" y="0"/>
      <p2 x="-360" y="0"/>
    </wire>
    <wire>
      <p1 x="-260" y="80"/>
      <p2 x="-220" y="80"/>
    </wire>
    <wire>
      <p1 x="-160" y="80"/>
      <p2 x="-140" y="80"/>
    </wire>
    <wire>
      <p1 x="-100" y="80"/>
      <p2 x="-80" y="80"/>
    </wire>
    <wire>
      <p1 x="-80" y="160"/>
      <p2 x="0" y="160"/>
    </wire>
    <wire>
      <p1 x="-260" y="20"/>
      <p2 x="-240" y="20"/>
    </wire>
    <wire>
      <p1 x="-240" y="20"/>
      <p2 x="-100" y="20"/>
    </wire>
    <wire>
      <p1 x="-240" y="100"/>
      <p2 x="-220" y="100"/>
    </wire>
    <wire>
      <p1 x="-60" y="40"/>
      <p2 x="0" y="40"/>
    </wire>
    <wire>
      <p1 x="-160" y="60"/>
      <p2 x="-100" y="60"/>
    </wire>
    <wire>
      <p1 x="-240" y="60"/>
      <p2 x="-220" y="60"/>
    </wire>
    <wire>
      <p1 x="-240" y="20"/>
      <p2 x="-240" y="60"/>
    </wire>
    <wire>
      <p1 x="-80" y="60"/>
      <p2 x="-80" y="80"/>
    </wire>
    <wire>
      <p1 x="-80" y="80"/>
      <p2 x="-80" y="160"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>