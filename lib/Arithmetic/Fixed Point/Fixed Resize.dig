<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes>
    <entry>
      <string>Description</string>
      <string>Fixed Resize expands or shrinks the bit width from &quot;in_bits&quot; to &quot;out_bits&quot; and or radix from &quot;in_radix&quot; to &quot;out_radix&quot;.
This circuit is the equivalent of the VHDL standard library &quot;fixed_generic_pkg&quot;.
If the MSB of the remainder is a &quot;1&quot; AND the LSB of the unrounded result is a &quot;1&quot; or the lower bits of the remainder contain a &quot;1&quot;, the result is incremented by the smallest representable number for that type.
If &quot;round = true&quot;, the result is rounded.
If &quot;saturate = true&quot;, the largest possible number is output at overflow, if &quot;false&quot; the upper bits are truncated.

{{de 
Fixed Resize erweitert oder verkleinert die Bitbreite von &quot;in_bits&quot; zu &quot;out_bits&quot; und oder Radix von &quot;in_radix&quot; zu &quot;out_radix&quot;.
Dieser Schaltkreis is das Äquivalent von der VHDL Standard Bibliothek &quot;fixed_generic_pkg&quot;
Wenn das MSB des Rests eine &quot;1&quot; ist UND das LSB des ungerundeten Ergebnisses eine &quot;1&quot; ist oder die unteren Bits des Rests eine &quot;1&quot; enthalten, wird das Ergebnis um die kleinste darstellbare Zahl für diesen Typ erhöht.
Falls &quot;round = true&quot; ist, wird das Ergebnis gerundet.
Falls &quot;saturate = true&quot; ist, wird beim overflow die größt mögliche Zahl ausgegeben, wenn &quot;false&quot; werden die oberen Bits abgeschnitten.
}}</string>
    </entry>
    <entry>
      <string>isGeneric</string>
      <boolean>true</boolean>
    </entry>
    <entry>
      <string>Label</string>
      <string>Resize</string>
    </entry>
    <entry>
      <string>romContent</string>
      <romList>
        <roms/>
      </romList>
    </entry>
  </attributes>
  <visualElements>
    <visualElement>
      <elementName>GenericInitCode</elementName>
      <elementAttributes>
        <entry>
          <string>generic</string>
          <string>in_bits := 16;
in_radix := 8;
out_bits := 8;
out_radix := 4;
signed := true;
saturate := true;
round := true;</string>
        </entry>
      </elementAttributes>
      <pos x="0" y="-100"/>
    </visualElement>
    <visualElement>
      <elementName>GenericCode</elementName>
      <elementAttributes>
        <entry>
          <string>generic</string>
          <string>if ((args.in_bits &lt; 2) | (args.in_radix &lt; 0) | (args.in_bits &lt; args.in_radix)) {
    panic(&quot;Generic input &quot; + args.in_bits + &quot;:&quot; + args.in_radix + &quot; out of bounds!\n(Bits &gt;= 2) &amp; (Radix &gt;= 0) &amp; (Bits &gt; Radix)\n&quot;);
}

if ((args.out_bits &lt; 2) | (args.out_radix &lt; 0) | (args.out_bits &lt; args.out_radix)) {
    panic(&quot;Generic output &quot; + args.in_bits + &quot;:&quot; + args.in_radix + &quot; out of bounds!\n(Bits &gt;= 2) &amp; (Radix &gt;= 0) &amp; (Bits &gt; Radix)\n&quot;);
}

if (args.signed) {
    global.fixed_format := 8;
} else {
    global.fixed_format := 7;
}


upper_in_bits := args.in_bits - args.in_radix;
lower_in_bits := args.in_radix;

upper_out_bits := args.out_bits - args.out_radix;
lower_out_bits := args.out_radix;

internel_bits := args.in_bits;


if (lower_in_bits &gt; lower_out_bits) {
    cut_lower_bit := lower_in_bits - lower_out_bits;
    cut_lower_bits := args.in_bits - cut_lower_bit;

    msb_bit := args.in_bits - 1;

    internel_bits = cut_lower_bits;

    cut_lower_s := addComponent(&quot;Splitter&quot;, 2, 0);
    cut_lower_s.&apos;Input Splitting&apos; = &quot;&quot; + args.in_bits;
    cut_lower_s.&apos;Output Splitting&apos; = &quot;&quot; + cut_lower_bit + &quot;-&quot; + msb_bit;

    addWire(0, 0, 2, 0);

    if ((args.round = true) &amp; (lower_in_bits &gt;= 2)) {
        round_s := addComponent(&quot;Splitter&quot;, 2, 3);
        round_s.&apos;Input Splitting&apos; = &quot;&quot; + args.in_bits;

        addWire(0, 0, 0, 3);
        addWire(0, 3, 2, 3);

        if (lower_in_bits = 2) {
            round_s.&apos;Output Splitting&apos; = &quot;1,1&quot;;

            round_g := addComponent(&quot;Ground&quot;, 3, 5);
            round_g.Bits = 1;
            round_g.rotation = 1;
        } else {
            round_s.&apos;Output Splitting&apos; = &quot;&quot; + (cut_lower_bit - 1) + &quot;,1,1&quot;;
        }

        or_reduce := addComponent(&quot;Or Reduce.dig&quot;, 6, 3);
        or_reduce.bits := cut_lower_bit - 1;

        addWire(3, 3, 6, 3);

        round_or := addComponent(&quot;Or&quot;, 10, 3);

        addWire(9, 3, 10, 3);
        addWire(3, 5, 10, 5);

        round_and := addComponent(&quot;And&quot;, 14, 4);

        addWire(13, 4, 14, 4);
        addWire(3, 4, 5, 4);
        addWire(5, 4, 5, 6);
        addWire(5, 6, 14, 6);

        // extend for runding
        internel_bits = internel_bits + 1;
        upper_in_bits = upper_in_bits + 1;

        ext_upper_e := addComponent(&quot;Bit Extender.dig&quot;, 6, 0);
        ext_upper_e.in_bits := cut_lower_bits;
        ext_upper_e.out_bits := internel_bits;
        ext_upper_e.signed := args.signed;
        
        addWire(3, 0, 6, 0);

        round_a := addComponent(&quot;Add&quot;, 19, 0);
        round_a.Bits = internel_bits;

        round_g := addComponent(&quot;Ground&quot;, 18, 1);
        round_g.Bits = internel_bits;
        round_g.rotation = 1;

        addWire(9, 0, 19, 0);
        addWire(18, 1, 19, 1);
        addWire(17, 5, 18, 5);
        addWire(18, 5, 18, 2);
        addWire(18, 2, 19, 2);
    } else {
        addWire(3, 0, 22, 0);
    }
} else if (lower_in_bits &lt; lower_out_bits) {
    lower_bits := lower_out_bits - lower_in_bits;
    ext_lower_bits := lower_bits + args.in_bits;
    
    internel_bits = ext_lower_bits;

    ext_lower_s := addComponent(&quot;Splitter&quot;, 7, -1);
    ext_lower_s.&apos;Input Splitting&apos; = &quot;&quot; + lower_bits + &quot;,&quot; + args.in_bits;
    ext_lower_s.&apos;Output Splitting&apos; = &quot;&quot; + ext_lower_bits;

    ext_lower_g := addComponent(&quot;Ground&quot;, 5, -1);
    ext_lower_g.Bits = lower_bits;
    ext_lower_g.rotation = 1;

    addWire(5, -1, 7, -1);
    addWire(0, 0, 7, 0);
    addWire(8, -1, 8, 0);
    addWire(8, 0, 22, 0);
} else {
    addWire(0, 0, 22, 0);
}

if (upper_in_bits &gt; upper_out_bits) {
    msb_bit := internel_bits - 1;

    cut_upper_s := addComponent(&quot;Splitter&quot;, 25, 0);
    cut_upper_s.&apos;Input Splitting&apos; = &quot;&quot; + internel_bits;
    cut_upper_s.&apos;Output Splitting&apos; = &quot;&quot; + args.out_bits;

    addWire(22, 0, 25, 0);

    if (args.saturate) {
        saturate_bits := internel_bits - args.out_bits;

        saturate_s := addComponent(&quot;Splitter&quot;, 25, 6);
        saturate_s.mirror = true;
        saturate_s.splitterSpreading = 2;
        saturate_s.&apos;Input Splitting&apos; = &quot;&quot; + internel_bits;

        saturate_const := addComponent(&quot;Const&quot;, 28, -1);
        saturate_const.rotation = 3;
        saturate_const.Bits = args.out_bits;

        if (args.signed) {
            saturate_s.&apos;Output Splitting&apos; = &quot;&quot; + (args.out_bits - 1) + &quot;-&quot; + (msb_bit - 1) + &quot;,1&quot;;

            saturate_const.Value = !(1 &lt;&lt; (args.out_bits - 1));

            max_not := addComponent(&quot;Not&quot;, 29, 3);
            max_not.Bits = args.out_bits;

            max_mux := addComponent(&quot;Multiplexer&quot;, 32, 1);
            max_mux.Bits = args.out_bits;

            addWire(28, -1, 28, 3);
            addWire(28, 3, 29, 3);
            addWire(31, 3, 32, 3);
            addWire(28, 1, 32, 1);

            upper_not := addComponent(&quot;Not&quot;, 29, 7);
            upper_not.Bits = saturate_bits;

            upper_mux := addComponent(&quot;Multiplexer&quot;, 32, 5);
            upper_mux.flipSelPos = true;
            upper_mux.Bits = saturate_bits;

            addWire(26, 6, 28, 6);
            addWire(28, 7, 28, 5);
            addWire(28, 7, 29, 7);
            addWire(31, 7, 32, 7);
            addWire(28, 5, 32, 5);

            addWire(26, 4, 33, 4);
            addWire(33, 3, 33, 5);

            addWire(34, 6, 35, 6);
        } else {
            saturate_s.&apos;Output Splitting&apos; = &quot;&quot; + args.out_bits + &quot;-&quot; + msb_bit;

            saturate_const.Value = !(1 &lt;&lt; args.out_bits);

            addWire(26, 6, 35, 6);

            addWire(28, -1, 28, 2);
            addWire(28, 2, 34, 2);
        }

        addWire(23, 0, 23, 6);
        addWire(23, 6, 25, 6);

        or_reduce := addComponent(&quot;Or Reduce.dig&quot;, 35, 6);
        or_reduce.bits := saturate_bits;

        addWire(38, 6, 39, 6);
        addWire(39, 6, 39, 2);

        mux := addComponent(&quot;Multiplexer&quot;, 38, 0);
        mux.Bits = args.out_bits;

        addWire(26, 0, 38, 0);
        addWire(34, 2, 38, 2);
    } else {
        addWire(26, 0, 40, 0);
        addWire(40, 0, 40, 1);
    }
} else if (upper_in_bits &lt; upper_out_bits) {
    ext_upper := addComponent(&quot;Bit Extender.dig&quot;, 25, 0);
    ext_upper.in_bits := internel_bits;
    ext_upper.out_bits := args.out_bits;
    ext_upper.signed := args.signed;

    addWire(22, 0, 25, 0);
    addWire(28, 0, 40, 0);
    addWire(40, 0, 40, 1);
} else {
    addWire(22, 0, 40, 0);
    addWire(40, 0, 40, 1);
}</string>
        </entry>
      </elementAttributes>
      <pos x="1020" y="-2740"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>in</string>
        </entry>
        <entry>
          <string>generic</string>
          <string>this.Bits = args.in_bits;
this.intFormat = global.fixed_format;
this.fixedPoint = args.in_radix;</string>
        </entry>
      </elementAttributes>
      <pos x="-40" y="0"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>out</string>
        </entry>
        <entry>
          <string>generic</string>
          <string>this.Bits = args.out_bits;
this.intFormat = global.fixed_format;
this.fixedPoint = args.out_radix;</string>
        </entry>
      </elementAttributes>
      <pos x="840" y="20"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="-40" y="0"/>
      <p2 x="0" y="0"/>
    </wire>
    <wire>
      <p1 x="800" y="20"/>
      <p2 x="840" y="20"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>